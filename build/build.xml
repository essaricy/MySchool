<project name="MySchool" default="CleanBuildDeploy" basedir="../">
    <description>Builds and deploys MySchool to server</description>

    <taskdef resource="net/sf/antcontrib/antlib.xml" />
    <taskdef name="unset" classname="ise.antelope.tasks.Unset"/>

    <condition property="isWindows" value="true">
        <os family="windows" />
    </condition>

    <condition property="isUnix" value="true">
        <os family="unix" />
    </condition>

    <!-- TODO: Need to find a way to load this properties file dynamically -->
    <property file="build/build_WINDOWS.properties" />
    <!-- Load all the server properties -->
    <property file="build/build.properties" />
    <property file="build/server-database.properties" />
	<property file="build/server-notification.properties" />
    <property file="build/server-sms.properties" />
    <property file="build/server-smtp.properties" />
    <property file="build/server-storage.properties" />
	<property file="build/server-template.properties" />
	<property file="build/server-web.properties" />

    <!-- stage.dir point the initial directory where the base copies are kept -->
    <property name="stage.dir" value="${app.build.dir}/stage" />

    <tstamp prefix="build-info">
        <format property="current-date" pattern="d-MMMM-yyyy" locale="en" />
        <format property="current-time" pattern="hh:mm:ss a z" locale="en" />
    </tstamp>

    <path id="jars-classpath">
        <fileset dir="${lib}" includes="*.jar" />
    </path>

    <target name="CleanBuildDeploy" description="Cleaning, Building and Deploying all modules">
        <fail unless="myschool.name" message="You must set 'myschool.name' property to run the build"/>
        <!-- Here are the build steps.
        1. Initialize all the required properties
        2. Clean all the code bases and Target directories
        3. Build all required jars for each code base except web
        4. Copy all the resources in each code base to the build target directory (stage.dir)
        5. Copy all the required libraries to stage.dir
        6. For each server configured in server-appserver*.properties, create a directory and
           dump all the files from stage.dir. The new directory will be the destination directory for
           local servers and will be uploading directory for remote servers.
        7. Detokenize in the new directory
        8. Run necessary programs that generate files
        9. Build war and deploy.
        -->
        <antcall target="Init" />
        <antcall target="CleanAll" />
        <antcall target="BuildAll" />
        <antcall target="DeployAll" />
        <antcall target="CopyLibs" />
        <antcall target="DeployToServers" />
        <antcall target="CleanCodeBases" />
        <antcall target="FileStatistics" />
    </target>

    <target name="Init" depends="InitWindows,InitUnix"/>

    <target name="InitWindows" if="isWindows">
        <echo message="Loading WINDOWS properties file ${build.windows.properties}" />
        <property file="${build.windows}" />
    </target>
    <target name="InitUnix" if="isUnix">
        <echo message="Loading UNIX properties file ${build.unix.properties}" />
        <property file="${build.unix}" />
    </target>

    <target name="Clean">
        <antcall target="CleanCodeBases" />
    </target>

    <target name="CleanAll">
        <antcall target="CleanCodeBases" />
        <antcall target="CreateTargetDirs" />
    </target>

    <target name="CleanCodeBases">
    	<ant antfile="build.xml" target="Clean" dir="${quasar.core.project}" />
    	<ant antfile="build.xml" target="Clean" dir="${myschool.support}" />
        <ant antfile="build.xml" target="Clean" dir="${myschool.base}" />
        <ant antfile="build.xml" target="Clean" dir="${myschool.transformation}" />
        <ant antfile="build.xml" target="Clean" dir="${myschool.infrastructure}" />
        <ant antfile="build.xml" target="Clean" dir="${myschool.service}" />
        <ant antfile="build.xml" target="Clean" dir="${myschool.scheduler}" />
        <ant antfile="build.xml" target="Clean" dir="${myschool.server}" />
        <ant antfile="build.xml" target="Clean" dir="${myschool.sautil}" />
        <ant antfile="build.xml" target="Clean" dir="${myschool.web}" />
    </target>

    <target name="CreateTargetDirs" if="myschool.name">
        <!-- Use temp directory to do all these stuff -->
        <mkdir dir="${app.build.dir}" />
        <mkdir dir="${stage.dir}" />

        <delete dir="${stage.dir}/${deploy}"/>
        <mkdir dir="${stage.dir}/${deploy}"/>
        <mkdir dir="${stage.dir}/${deploy.lib}"/>
        <mkdir dir="${stage.dir}/${deploy.scripts}"/>
        <mkdir dir="${stage.dir}/${deploy.templates}"/>
    </target>

    <target name="BuildAll">
    	<ant antfile="build.xml" target="Build" dir="${quasar.core.project}" />
    	<ant antfile="build.xml" target="Build" dir="${myschool.support}" />
        <ant antfile="build.xml" target="Build" dir="${myschool.base}" />
        <ant antfile="build.xml" target="Build" dir="${myschool.transformation}" />
        <ant antfile="build.xml" target="Build" dir="${myschool.infrastructure}" />
        <ant antfile="build.xml" target="Build" dir="${myschool.service}" />
        <ant antfile="build.xml" target="Build" dir="${myschool.scheduler}" />
        <ant antfile="build.xml" target="Build" dir="${myschool.server}" />
        <ant antfile="build.xml" target="Build" dir="${myschool.sautil}" />
        <ant antfile="build.xml" target="Build" dir="${myschool.web}" />
    </target>

    <target name="DeployAll">
    	<ant antfile="build.xml" target="Deploy" dir="${quasar.core.project}" />
        <ant antfile="build.xml" target="Deploy" dir="${myschool.support}" />
        <ant antfile="build.xml" target="Deploy" dir="${myschool.base}" />
        <ant antfile="build.xml" target="Deploy" dir="${myschool.transformation}" />
        <ant antfile="build.xml" target="Deploy" dir="${myschool.infrastructure}" />
        <ant antfile="build.xml" target="Deploy" dir="${myschool.service}" />
        <ant antfile="build.xml" target="Deploy" dir="${myschool.scheduler}" />
        <ant antfile="build.xml" target="Deploy" dir="${myschool.server}" />
        <ant antfile="build.xml" target="Deploy" dir="${myschool.sautil}" />
        <ant antfile="build.xml" target="Deploy" dir="${myschool.server}" />
        <ant antfile="build.xml" target="DeployResources" dir="${myschool.web}" />
    </target>

    <target name="DeployToServers">
        <ant antfile="${build}/deploy.xml" target="DeployToServers" dir="${basedir}" />
    </target>

    <target name="CopyLibs">
        <copy todir="${stage.dir}/${deploy.lib}">
            <fileset dir="${lib}">
                <!-- Application specific Jars -->
                <include name="MySchoolSautil.jar" />
                <include name="MySchoolBase.jar" />
                <include name="MySchoolService.jar" />
                <include name="MySchoolTransformation.jar" />
                <include name="MySchoolInfrastructure.jar" />
                <!-- Third party jars -->
                <include name="activemq-all-5.6.0.jar" />
                <include name="aopalliance.jar" />
                <include name="asm-3.3.1.jar" />
                <include name="aspectjrt-1.6.11.jar" />
                <include name="aspectjweaver-1.6.11.jar" />
                <include name="cglib-2.2.jar" />
                <include name="commons-codec.jar" />
                <include name="commons-httpclient.jar" />
            	<include name="commons-io-2.1.jar" />
                <include name="commons-logging-1.1.1.jar" />
                <include name="concurrent-1.3.3.jar" />
                <include name="datafactory-0.8.jar" />
            	<include name="dynamicreports-core-2.4.1.jar" />
            	<include name="freemarker.jar" />
                <include name="google-api-client-1.22.0.jar" />
                <include name="google-api-services-drive-v3-rev34-1.22.0.jar" />
                <include name="google-http-client-1.22.0.jar" />
                <include name="google-http-client-jackson2-1.22.0.jar" />
                <include name="google-oauth-client-1.22.0.jar" />
                <include name="google-oauth-client-java6-1.22.0.jar" />
                <include name="google-oauth-client-jetty-1.22.0.jar" />
                <include name="jackson-core-2.8.0.jar" />
                <include name="jasperreports-4.5.1.jar" />
                <include name="jcs-1.3.jar" />
                <include name="jettison-1.3.3.jar" />
                <include name="log4j.jar" />
                <include name="mail.jar" />
                <include name="org.mortbay.jetty.jar" />
                <include name="org.mortbay.jetty.util.jar" />
                <!-- Spring Jars -->
                <include name="org.springframework.aop-3.0.5.RELEASE.jar" />
                <include name="org.springframework.asm-3.0.5.RELEASE.jar" />
                <include name="org.springframework.beans-3.0.5.RELEASE.jar" />
                <include name="org.springframework.context-3.0.5.RELEASE.jar" />
                <include name="org.springframework.context.support-3.0.5.RELEASE.jar" />
                <include name="org.springframework.core-3.0.5.RELEASE.jar" />
                <include name="org.springframework.expression-3.0.5.RELEASE.jar" />
                <include name="org.springframework.jdbc-3.0.5.RELEASE.jar" />
                <include name="poi-3.7.jar" />
                <include name="postgresql-9.1-901.jdbc4.jar" />
                <include name="quartz-2.2.0.jar" />
                <include name="thumbnailator-0.4.5-all.jar" />
                <include name="xstream-1.4.4.jar" />
                <include name="xpp3-1.1.4c.jar" />
            </fileset>
        </copy>
    </target>

    <target name="FileStatistics" if="print.stats">
        <ant antfile="build/file_statistics.xml" dir="${basedir}" />
    </target>

</project>
