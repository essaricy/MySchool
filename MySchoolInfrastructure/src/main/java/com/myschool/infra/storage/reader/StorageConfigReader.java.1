package com.myschool.infra.storage.reader;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;

import com.myschool.common.exception.ConfigurationException;
import com.myschool.common.exception.FileSystemException;
import com.myschool.common.util.PropertiesUtil;
import com.myschool.common.util.StringUtil;
import com.myschool.infra.application.constants.AppConfigConstants;
import com.myschool.infra.application.dto.AgentDto;
import com.myschool.infra.application.dto.AppConfigDto;
import com.myschool.infra.application.dto.MySchoolDto;
import com.myschool.infra.filesystem.constants.FileSystemConfigConstants;
import com.myschool.infra.filesystem.dto.AbsenceCode;
import com.myschool.infra.filesystem.dto.DirectoryDto;
import com.myschool.infra.filesystem.dto.FileDto;
import com.myschool.infra.filesystem.util.FileUtil;
import com.myschool.infra.storage.model.StorageConfig;
import com.myschool.infra.storage.model.StorageProvider;

@Component
public class StorageConfigReader extends DefaultHandler {

    private StorageConfig storageConfig;

    public StorageConfig getStorageConfig(File configFile) throws ConfigurationException {
        try {
            String message = configFile.getAbsolutePath() + " is missing/inaccessible";
            FileUtil.checkFile(configFile.getAbsolutePath(), message, message);
            readStorageConfig(configFile);
        } catch (SAXException saxException) {
            throw new ConfigurationException(saxException.getMessage(), saxException);
        } catch (IOException ioException) {
            throw new ConfigurationException(ioException.getMessage(), ioException);
        } catch (FileSystemException fileSystemException) {
            throw new ConfigurationException(fileSystemException.getMessage(), fileSystemException);
        }
        return storageConfig;
    }

    private void readStorageConfig(File configFile) throws SAXException, IOException {
        // TODO validate app-config.xml file against schema
        XMLReader xMLReader = XMLReaderFactory.createXMLReader();
        // Set the ContentHandler...
        xMLReader.setContentHandler(this);
        // Parse the file...
        FileInputStream configXmlStream = new FileInputStream(configFile);
        xMLReader.parse(new InputSource(configXmlStream));
    }

    /* (non-Javadoc)
     * @see org.xml.sax.helpers.DefaultHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
     */
    @Override
    public void startElement(String namespaceURI, String localName,
            String qName, Attributes attributes) throws SAXException {

        if (localName.equalsIgnoreCase("storage-config")) {
            storageConfig = new StorageConfig();
        } else if (localName.equalsIgnoreCase("storage")) {
            StorageProvider storageProvider = new StorageProvider();
            storageProvider.setAppname(attributes.getValue("appname"));
            storageProvider.setDirectLink(attributes.getValue("direct-link"));
            storageProvider.setPassportLink(attributes.getValue("passport-link"));
            storageProvider.setThumbnailLink(attributes.getValue("thumbnail-link"));
            storageConfig.setStorageProvider(storageProvider);
        } else if (localName.equalsIgnoreCase("params")) {
            StorageProvider storageProvider = storageConfig.getStorageProvider();
            storageProvider.setParams(new HashMap<String, String>());
        } else if (localName.equalsIgnoreCase("param")) {
            String key = attributes.getValue("key");
            String value = attributes.getValue("value");

            StorageProvider storageProvider = storageConfig.getStorageProvider();
            Map<String, String> params = storageProvider.getParams();
            params.put(key, value);
        } else if (localName.equalsIgnoreCase("hierarchy")) {
            storageConfig.setDirectories(new ArrayList<DirectoryDto>());
        } else if (localName.equalsIgnoreCase("param")) {
            String key = attributes.getValue("key");
            String value = attributes.getValue("value");

            StorageProvider storageProvider = storageConfig.getStorageProvider();
            Map<String, String> params = storageProvider.getParams();
            params.put(key, value);
        }
    }

    @Override
    public void endElement(String uri, String localName, String qName)
            throws SAXException {
    }

    /**
     * Gets the directory.
     *
     * @param directoryNode the directory node
     * @param parentDirectory the parent directory
     * @param pathFromParent 
     * @return the directory
     */
    private DirectoryDto getDirectory(Node directoryNode, File parentDirectory, String pathFromParent) {
        DirectoryDto directoryDto = null;
        if (directoryNode.getNodeType() == Node.ELEMENT_NODE) {
            Element directoryElement = (Element) directoryNode;
            directoryDto = new DirectoryDto();
            directoryDto.setAbsenceCode(AbsenceCode.get(directoryElement.getAttribute(FileSystemConfigConstants.ATTRIBUTE_ABSENCE)));
            String fileName = directoryElement.getAttribute(FileSystemConfigConstants.ATTRIBUTE_NAME);
            File directory = new File(parentDirectory, fileName);
            directoryDto.setName(fileName);
            directoryDto.setFile(directory);

            if (pathFromParent == null) {
                directoryDto.setPath(fileName);
            } else {
                directoryDto.setPath(pathFromParent + "/" + fileName);
            }

            NodeList childDirectories = directoryElement.getElementsByTagName(FileSystemConfigConstants.ELEMENT_DIRECTORY);
            int numberOfChildDirectories = childDirectories.getLength();
            if (numberOfChildDirectories > 0) {
                List<DirectoryDto> directories = directoryDto.getDirectories();
                if (directories == null) {
                    directories = new ArrayList<DirectoryDto>();
                }
                for (int index=0; index<numberOfChildDirectories; index++) {
                    Node childDirectory = childDirectories.item(index);
                    if (childDirectory.getParentNode() == directoryElement) {
                        directories.add(getDirectory(childDirectories.item(index), directory, directoryDto.getPath()));
                    }
                }
                directoryDto.setDirectories(directories);
            }

            NodeList childFiles = directoryElement.getElementsByTagName(FileSystemConfigConstants.ELEMENT_FILE);
            int numberOfChildFiles = childFiles.getLength();
            if (numberOfChildFiles > 0) {
                List<FileDto> files = directoryDto.getFiles();
                if (files == null) {
                    files = new ArrayList<FileDto>();
                }
                for (int index=0; index<numberOfChildFiles; index++) {
                    Node childFile = childFiles.item(index);
                    if (childFile.getParentNode() == directoryElement) {
                        files.add(getFile(childFiles.item(index), directory));
                    }
                }
                directoryDto.setFiles(files);
            }
        }
        return directoryDto;
    }

    /**
     * Gets the file.
     *
     * @param fileNode the file node
     * @param parentDirectory the parent directory
     * @return the file
     */
    private FileDto getFile(Node fileNode, File parentDirectory) {
        Element fileElement = null;
        FileDto fileDto = null;
        if (fileNode.getNodeType() == Node.ELEMENT_NODE) {
            fileElement = (Element) fileNode;
            fileDto = new FileDto();
            fileDto.setAbsenceCode(AbsenceCode.get(fileElement.getAttribute(FileSystemConfigConstants.ATTRIBUTE_ABSENCE)));
            String name = fileElement.getAttribute(FileSystemConfigConstants.ATTRIBUTE_NAME);
            fileDto.setName(name);
            fileDto.setFile(new File(parentDirectory, name));
        }
        return fileDto;
    }

}
