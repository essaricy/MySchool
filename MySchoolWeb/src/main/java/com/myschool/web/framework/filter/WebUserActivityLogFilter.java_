package com.myschool.web.framework.filter;

import java.io.IOException;
import java.util.Date;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;

import com.myschool.user.dto.SessionDetailsDto;
import com.myschool.user.dto.UserContext;
import com.myschool.user.dto.WebClientDetailsDto;
import com.myschool.web.application.constants.WebConstants;
import com.myschool.web.framework.util.HttpUtil;

/**
 * The Class WebUserActivityLogFilter.
 */
public class WebUserActivityLogFilter implements Filter {

    private static final Logger LOGGER = Logger.getLogger(WebUserActivityLogFilter.class);

    /** The GLOBAL_EXCLUDES. */
    private static String[] GLOBAL_EXCLUDES = {
        // Common excludes
        "/themes", "/scripts", "/image", "/images", "/widgets"/*, "/jcaptcha",
        // login excludes
        "/login.htm", "/logout.htm", "/launchLogin.htm",*/
    };

    /* (non-Javadoc)
     * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
     */
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }

    /* (non-Javadoc)
     * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)
     */
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,
            FilterChain filterChain) throws IOException, ServletException {
        long start = System.currentTimeMillis();
        LOGGER.debug("============================ REQUEST START ============================ ");
        HttpServletRequest request = (HttpServletRequest) servletRequest;
        HttpServletResponse response = (HttpServletResponse) servletResponse;

        // Force request a session
        WebClientDetailsDto webClientDetails = null;
        SessionDetailsDto sessionDetails = null;

        String requestURI = request.getRequestURI();
        String contextPath = request.getContextPath();
        HttpSession session = request.getSession(true);

        boolean exclude = exclude(contextPath, requestURI);
        System.out.println("#### requestURI: " + requestURI +", exclude = " + exclude + ", session.isNew()? " + session.isNew());

        if (session.isNew()) {
        	System.out.println("#### session is brand new");
        	webClientDetails = HttpUtil.getWebClientDetails((HttpServletRequest) servletRequest);
        	sessionDetails = new SessionDetailsDto();
        	sessionDetails.setSessionId(session.getId());
        	sessionDetails.setSessionStartTime(new Date(session.getCreationTime()));
        	//sessionDetails.setSessionEndTime("");
        	// TODO create user_session record in the database.
        } else {
        	if (!exclude) {
        		System.out.println("#### session is brand old");
            }
        }
        // Let request complete.
        filterChain.doFilter(servletRequest, servletResponse);

        if (requestURI.equals("login.htm")) {
        	Object object = session.getAttribute(WebConstants.USER_CONTEXT);
        	LOGGER.debug("########## WebConstants.USER_CONTEXT " + object);
        	if (object instanceof UserContext) {
        		UserContext context = (UserContext) object;
        		int userId = context.getLogin().getId();
        		// TODO update user_session record with user_id.
        		System.out.println("########## A record already exists. Update the record with the session id.");
        	}
        } else if (requestURI.equals("logout.htm")) {
        	// Ignore logout book marks
        	System.out.println("########## session.isNew() " + session.isNew());
        	if (!session.isNew()) {
        		// TODO update the session end time.
        		System.out.println("session is ended. update session end time.");
            }
        } else {
        	// TODO create user_activity record
            // Themes, widgets, image, images, scripts
            if (!exclude) {
            	System.out.println("########## User is in session. create an activity record.");
            }
        }
        long end = System.currentTimeMillis();
        LOGGER.debug("============================ REQUEST END ============================ ");
        LOGGER.debug("TIME TAKEN TO COMPLETE YOUR REQUEST IS: " + (end-start) + " ms.");
    }

    private static boolean exclude(String contextPath, String requestURI) {
        boolean exclude = false;
        String actualRequest = requestURI.substring(requestURI.indexOf(contextPath) + contextPath.length(), requestURI.length());
        for (String excludeRequest : GLOBAL_EXCLUDES) {
            if (actualRequest.equals(excludeRequest) || actualRequest.indexOf(excludeRequest) != -1) {
                exclude = true;
                break;
            }
        }
        return exclude;
    }

    /* (non-Javadoc)
     * @see javax.servlet.Filter#destroy()
     */
    @Override
    public void destroy() {
    }

}
